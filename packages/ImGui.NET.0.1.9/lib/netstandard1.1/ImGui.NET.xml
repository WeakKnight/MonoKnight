<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImGui.NET</name>
    </assembly>
    <members>
        <member name="T:ImGuiNET.ColorEditMode">
            <summary>
            Enumeration for ColorEditMode()
            </summary>
        </member>
        <member name="T:ImGuiNET.ColorTarget">
            <summary>
            Enumeration for PushStyleColor() / PopStyleColor()
            </summary>
        </member>
        <member name="F:ImGuiNET.ColorTarget.FrameBg">
            <summary>
            Background of checkbox, radio button, plot, slider, text input
            </summary>
        </member>
        <member name="F:ImGuiNET.ColorTarget.ModalWindowDarkening">
            <summary>
            darken entire screen when a modal window is active
            </summary>
        </member>
        <member name="T:ImGuiNET.DrawCmd">
            <summary>
            Typically, 1 command = 1 gpu draw call (unless command is a callback)
            </summary>
        </member>
        <member name="F:ImGuiNET.DrawCmd.ElemCount">
            <summary>
            Number of indices (multiple of 3) to be rendered as triangles.
            Vertices are stored in the callee ImDrawList's vtx_buffer[] array, indices in idx_buffer[].
            </summary>
        </member>
        <member name="F:ImGuiNET.DrawCmd.ClipRect">
            <summary>
            Clipping rectangle (x1, y1, x2, y2)
            </summary>
        </member>
        <member name="F:ImGuiNET.DrawCmd.TextureId">
            <summary>
            User-provided texture ID. Set by user in ImfontAtlas::SetTexID() for fonts or passed to Image*() functions.
            Ignore if never using images or multiple fonts atlas.
            </summary>
        </member>
        <member name="F:ImGuiNET.DrawCmd.UserCallback">
            <summary>
            If != NULL, call the function instead of rendering the vertices. clip_rect and texture_id will be set normally.
            </summary>
        </member>
        <member name="F:ImGuiNET.DrawCmd.UserCallbackData">
            <summary>
            The draw callback code can access this.
            </summary>
        </member>
        <member name="T:ImGuiNET.DrawData">
            <summary>
            All draw data to render an ImGui frame
            </summary>
        </member>
        <member name="F:ImGuiNET.DrawData.Valid">
            <summary>
            Only valid after Render() is called and before the next NewFrame() is called.
            </summary>
        </member>
        <member name="F:ImGuiNET.DrawData.TotalVtxCount">
            <summary>
            For convenience, sum of all cmd_lists vtx_buffer.Size
            </summary>
        </member>
        <member name="F:ImGuiNET.DrawData.TotalIdxCount">
            <summary>
            For convenience, sum of all cmd_lists idx_buffer.Size
            </summary>
        </member>
        <member name="T:ImGuiNET.NativeDrawList">
            <summary>
            Draw command list
            This is the low-level list of polygons that ImGui functions are filling. At the end of the frame, all command lists are passed to your ImGuiIO::RenderDrawListFn function for rendering.
            At the moment, each ImGui window contains its own ImDrawList but they could potentially be merged in the future.
            If you want to add custom rendering within a window, you can use ImGui::GetWindowDrawList() to access the current draw list and add your own primitives.
            You can interleave normal ImGui:: calls and adding primitives to the current draw list.
            All positions are in screen coordinates (0,0=top-left, 1 pixel per unit). Primitives are always added to the list and not culled (culling is done at render time and at a higher-level by ImGui:: functions).
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeDrawList.CmdBuffer">
            <summary>
            ImVector(ImDrawCmd).
            Commands. Typically 1 command = 1 gpu draw call.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeDrawList.IdxBuffer">
            <summary>
            ImVector(ImDrawIdx).
            Index buffer. Each command consume ImDrawCmd::ElemCount of those
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeDrawList.VtxBuffer">
            <summary>
            ImVector(ImDrawVert)
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeDrawList._OwnerName">
            <summary>
            Pointer to owner window's name (if any) for debugging
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeDrawList._VtxCurrentIdx">
            <summary>
            [Internal] == VtxBuffer.Size
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:ImGuiNET.NativeDrawList._VtxWritePtr" -->
        <!-- Badly formed XML comment ignored for member "F:ImGuiNET.NativeDrawList._IdxWritePtr" -->
        <member name="F:ImGuiNET.NativeDrawList._ClipRectStack">
            <summary>
            [Internal]
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeDrawList._TextureIdStack">
            <summary>
            [Internal]
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeDrawList._Path">
            <summary>
            [Internal] current path building
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeDrawList._ChannelsCurrent">
            <summary>
            [Internal] current channel number (0)
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeDrawList._ChannelsCount">
            <summary>
            [Internal] number of active channels (1+)
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeDrawList._Channels">
            <summary>
            [Internal] draw channels for columns API (not resized down so _ChannelsCount may be smaller than _Channels.Size)
            </summary>
        </member>
        <member name="T:ImGuiNET.NativeFont">
            <summary>
            Font runtime data and rendering.
            ImFontAtlas automatically loads a default embedded font for you when you call GetTexDataAsAlpha8() or GetTexDataAsRGBA32().
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeFont.FontSize">
            <summary>
            Height of characters, set during loading (don't change after loading).
            Default value: [user-set]
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeFont.Scale">
            <summary>
            Base font scale, multiplied by the per-window font scale which you can adjust with SetFontScale()
            Default value: 1.0f.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeFont.DisplayOffset">
            <summary>
            Offset font rendering by xx pixels.
            Default value: (0.0f, 1.0f)
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeFont.Glyphs">
            <summary>
            ImVector(Glyph)
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeFont.IndexXAdvance">
            <summary>
            Sparse. Glyphs->XAdvance directly indexable (more cache-friendly that reading from Glyphs,
            for CalcTextSize functions which are often bottleneck in large UI).
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeFont.IndexLookup">
            <summary>
            Sparse. Index glyphs by Unicode code-point.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeFont.FallbackGlyph">
            <summary>
            Equivalent to FindGlyph(FontFallbackChar)
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeFont.FallbackChar">
            <summary>
            Replacement glyph if one isn't found. Only set via SetFallbackChar()
            Default value: '?'
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeFont.ConfigData">
            <summary>
            ImFontConfig*. Pointer within ImFontAtlas->ConfigData
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeFont.ContainerAtlas">
            <summary>
            ImFontAtlas*
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeFont.Ascent">
            <summary>
            Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeFont.Descent">
            <summary>
            Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeFontAtlas.TexID">
            <summary>
            User data to refer to the texture once it has been uploaded to user's graphic systems.
            It ia passed back to you during rendering.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeFontAtlas.TexPixelsAlpha8">
            <summary>
            1 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeFontAtlas.TexPixelsRGBA32">
            <summary>
            4 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight * 4
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeFontAtlas.TexWidth">
            <summary>
            Texture width calculated during Build().
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeFontAtlas.TexHeight">
            <summary>
            Texture height calculated during Build().
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeFontAtlas.TexDesiredWidth">
            <summary>
            Texture width desired by user before Build(). Must be a power-of-two.
            If have many glyphs your graphics API have texture size restrictions you may want to increase texture width to decrease height.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeFontAtlas.TexUvWhitePixel">
            <summary>
            Texture coordinates to a white pixel (part of the TexExtraData block)
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeFontAtlas.Fonts">
            <summary>
            (ImVector(ImFont*)
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeFontAtlas.ConfigData">
            <summary>
            ImVector(ImFontConfig). Internal data
            </summary>
        </member>
        <member name="F:ImGuiNET.FontConfig.FontData">
            <summary>
            TTF data
            </summary>
        </member>
        <member name="F:ImGuiNET.FontConfig.FontDataSize">
            <summary>
            TTF data size
            </summary>
        </member>
        <member name="F:ImGuiNET.FontConfig.FontDataOwnedByAtlas">
            <summary>
            TTF data ownership taken by the container ImFontAtlas (will delete memory itself).
            Set to true.
            </summary>
        </member>
        <member name="F:ImGuiNET.FontConfig.FontNo">
            <summary>
            0.
            Index of font within TTF file
            </summary>
        </member>
        <member name="F:ImGuiNET.FontConfig.SizePixels">
            <summary>
            Size in pixels for rasterizer.
            </summary>
        </member>
        <member name="F:ImGuiNET.FontConfig.OversampleH">
            <summary>
            Rasterize at higher quality for sub-pixel positioning. We don't use sub-pixel positions on the Y axis.
            Set to 3.
            </summary>
        </member>
        <member name="F:ImGuiNET.FontConfig.OversampleV">
            <summary>
            Rasterize at higher quality for sub-pixel positioning. We don't use sub-pixel positions on the Y axis.
            Set to 1.
            </summary>
        </member>
        <member name="F:ImGuiNET.FontConfig.PixelSnapH">
            <summary>
            Align every character to pixel boundary (if enabled, set OversampleH/V to 1).
            Set to false.
            </summary>
        </member>
        <member name="F:ImGuiNET.FontConfig.GlyphExtraSpacing">
            <summary>
            Extra spacing (in pixels) between glyphs.
            Set to (0, 0).
            </summary>
        </member>
        <member name="F:ImGuiNET.FontConfig.GlyphRanges">
            <summary>
            List of Unicode range (2 value per range, values are inclusive, zero-terminated list).
            </summary>
        </member>
        <member name="F:ImGuiNET.FontConfig.MergeMode">
            <summary>
            Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs).
            Set to false.
            </summary>
        </member>
        <member name="F:ImGuiNET.FontConfig.MergeGlyphCenterV">
            <summary>
            When merging (multiple ImFontInput for one ImFont), vertically center new glyphs instead of aligning their baseline.
            Set to false.
            </summary>
        </member>
        <member name="F:ImGuiNET.FontConfig.Name">
            <summary>
            [Internal Use Only] Name (strictly for debugging)
            </summary>
        </member>
        <member name="F:ImGuiNET.FontConfig.DstFont">
            <summary>
            [Internal Use Only]
            </summary>
        </member>
        <member name="T:ImGuiNET.GuiKey">
            <summary>
            User fill ImGuiIO.KeyMap[] array with indices into the ImGuiIO.KeysDown[512] array
            </summary>
        </member>
        <member name="F:ImGuiNET.GuiKey.Tab">
            <summary>
            for tabbing through fields
            </summary>
        </member>
        <member name="F:ImGuiNET.GuiKey.LeftArrow">
            <summary>
            for text edit
            </summary>
        </member>
        <member name="F:ImGuiNET.GuiKey.RightArrow">
            <summary>
            for text edit
            </summary>
        </member>
        <member name="F:ImGuiNET.GuiKey.UpArrow">
            <summary>
            for text edit
            </summary>
        </member>
        <member name="F:ImGuiNET.GuiKey.DownArrow">
            <summary>
            for text edit
            </summary>
        </member>
        <member name="F:ImGuiNET.GuiKey.Home">
            <summary>
            for text edit
            </summary>
        </member>
        <member name="F:ImGuiNET.GuiKey.End">
            <summary>
            for text edit
            </summary>
        </member>
        <member name="F:ImGuiNET.GuiKey.Delete">
            <summary>
            for text edit
            </summary>
        </member>
        <member name="F:ImGuiNET.GuiKey.Backspace">
            <summary>
            for text edit
            </summary>
        </member>
        <member name="F:ImGuiNET.GuiKey.Enter">
            <summary>
            for text edit
            </summary>
        </member>
        <member name="F:ImGuiNET.GuiKey.Escape">
            <summary>
            for text edit
            </summary>
        </member>
        <member name="F:ImGuiNET.GuiKey.A">
            <summary>
            for text edit CTRL+A: select all
            </summary>
        </member>
        <member name="F:ImGuiNET.GuiKey.C">
            <summary>
            for text edit CTRL+C: copy
            </summary>
        </member>
        <member name="F:ImGuiNET.GuiKey.V">
            <summary>
            for text edit CTRL+V: paste
            </summary>
        </member>
        <member name="F:ImGuiNET.GuiKey.X">
            <summary>
            for text edit CTRL+X: cut
            </summary>
        </member>
        <member name="F:ImGuiNET.GuiKey.Y">
            <summary>
            for text edit CTRL+Y: redo
            </summary>
        </member>
        <member name="F:ImGuiNET.GuiKey.Z">
            <summary>
            for text edit CTRL+Z: undo
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGui.ScaleClipRects(ImGuiNET.DrawData*,System.Numerics.Vector2)">
            <summary>
            Helper to scale the ClipRect field of each ImDrawCmd.
            Use if your final output buffer is at a different scale than ImGui expects,
            or if there is a difference between your window resolution and framebuffer resolution.
            </summary>
            <param name="drawData">Pointer to the DrawData to scale.</param>
            <param name="scale">The scale to apply.</param>
        </member>
        <member name="T:ImGuiNET.ImGuiNative">
            <summary>
            Contains all of the exported functions from the native (c)imGui module.
            </summary>
        </member>
        <member name="F:ImGuiNET.ImVector.Data">
            <summary>T* Data</summary>
        </member>
        <member name="T:ImGuiNET.InputTextFlags">
            <summary>
            Flags for ImGui.InputText()
            </summary>
        </member>
        <member name="F:ImGuiNET.InputTextFlags.CharsDecimal">
            <summary>
            Allow 0123456789.+-*/
            </summary>
        </member>
        <member name="F:ImGuiNET.InputTextFlags.CharsHexadecimal">
            <summary>
            Allow 0123456789ABCDEFabcdef
            </summary>
        </member>
        <member name="F:ImGuiNET.InputTextFlags.CharsUppercase">
            <summary>
            Turn a..z into A..Z
            </summary>
        </member>
        <member name="F:ImGuiNET.InputTextFlags.CharsNoBlank">
            <summary>
            Filter out spaces, tabs
            </summary>
        </member>
        <member name="F:ImGuiNET.InputTextFlags.AutoSelectAll">
            <summary>
            Select entire text when first taking mouse focus
            </summary>
        </member>
        <member name="F:ImGuiNET.InputTextFlags.EnterReturnsTrue">
            <summary>
            Return 'true' when Enter is pressed (as opposed to when the value was modified)
            </summary>
        </member>
        <member name="F:ImGuiNET.InputTextFlags.CallbackCompletion">
            <summary>
            Call user function on pressing TAB (for completion handling)
            </summary>
        </member>
        <member name="F:ImGuiNET.InputTextFlags.CallbackHistory">
            <summary>
            Call user function on pressing Up/Down arrows (for history handling)
            </summary>
        </member>
        <member name="F:ImGuiNET.InputTextFlags.CallbackAlways">
            <summary>
            Call user function every time
            </summary>
        </member>
        <member name="F:ImGuiNET.InputTextFlags.CallbackCharFilter">
            <summary>
            Call user function to filter character. Modify data->EventChar to replace/filter input, or return 1 to discard character.
            </summary>
        </member>
        <member name="F:ImGuiNET.InputTextFlags.AllowTabInput">
            <summary>
            Pressing TAB input a '\t' character into the text field
            </summary>
        </member>
        <member name="F:ImGuiNET.InputTextFlags.CtrlEnterForNewLine">
            <summary>
            In multi-line mode, allow exiting edition by pressing Enter. Ctrl+Enter to add new line (by default adds new lines with Enter).
            </summary>
        </member>
        <member name="F:ImGuiNET.InputTextFlags.NoHorizontalScroll">
            <summary>
            Disable following the cursor horizontally
            </summary>
        </member>
        <member name="F:ImGuiNET.InputTextFlags.AlwaysInsertMode">
            <summary>
            Insert mode
            </summary>
        </member>
        <member name="F:ImGuiNET.InputTextFlags.ReadOnly">
            <summary>
            Read-only mode
            </summary>
        </member>
        <member name="F:ImGuiNET.InputTextFlags.Multiline">
            <summary>
            For internal use by InputTextMultiline()
            </summary>
        </member>
        <member name="P:ImGuiNET.IO.DisplaySize">
            <summary>
            Display size, in pixels. For clamping windows positions.
            Default value: [unset]
            </summary>
        </member>
        <member name="P:ImGuiNET.IO.DeltaTime">
            <summary>
            Time elapsed since last frame, in seconds.
            Default value: 1.0f / 10.0f.
            </summary>
        </member>
        <member name="P:ImGuiNET.IO.DisplayFramebufferScale">
            <summary>
            For retina display or other situations where window coordinates are different from framebuffer coordinates.
            User storage only, presently not used by ImGui.
            Default value: (1.0f, 1.0f).
            </summary>
        </member>
        <member name="P:ImGuiNET.IO.MousePosition">
            <summary>
            Mouse position, in pixels (set to -1,-1 if no mouse / on another screen, etc.).
            </summary>
        </member>
        <member name="P:ImGuiNET.IO.MouseWheel">
            <summary>
            Mouse wheel: 1 unit scrolls about 5 lines text.
            </summary>
        </member>
        <member name="P:ImGuiNET.IO.MouseDown">
            <summary>
            Mouse buttons: left, right, middle + extras.
            ImGui itself mostly only uses left button (BeginPopupContext** are using right button).
            Others buttons allows us to track if the mouse is being used by your application + available to user as a convenience via IsMouse** API.
            </summary>
        </member>
        <member name="P:ImGuiNET.IO.KeyMap">
            <summary>
            Map of indices into the KeysDown[512] entries array.
            Default values: [unset]
            </summary>
        </member>
        <member name="P:ImGuiNET.IO.KeysDown">
            <summary>
            Keyboard keys that are pressed (in whatever storage order you naturally have access to keyboard data)
            </summary>
        </member>
        <member name="P:ImGuiNET.IO.CtrlPressed">
            <summary>
            Keyboard modifier pressed: Control.
            </summary>
        </member>
        <member name="P:ImGuiNET.IO.ShiftPressed">
            <summary>
            Keyboard modifier pressed: Shift
            </summary>
        </member>
        <member name="P:ImGuiNET.IO.AltPressed">
            <summary>
            Keyboard modifier pressed: Alt
            </summary>
        </member>
        <member name="T:ImGuiNET.MouseCursorKind">
            <summary>
            Enumeration for GetMouseCursor()
            </summary>
        </member>
        <member name="F:ImGuiNET.MouseCursorKind.TextInput">
            <summary>
            When hovering over InputText, etc.
            </summary>
        </member>
        <member name="F:ImGuiNET.MouseCursorKind.Move">
            <summary>
            Unused
            </summary>
        </member>
        <member name="F:ImGuiNET.MouseCursorKind.ResizeNS">
            <summary>
            Unused
            </summary>
        </member>
        <member name="F:ImGuiNET.MouseCursorKind.ResizeEW">
            <summary>
            When hovering over a column
            </summary>
        </member>
        <member name="F:ImGuiNET.MouseCursorKind.ResizeNESW">
            <summary>
            Unused
            </summary>
        </member>
        <member name="F:ImGuiNET.MouseCursorKind.ResizeNWSE">
            <summary>
            When hovering over the bottom-right corner of a window
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.DisplaySize">
            <summary>
            Display size, in pixels. For clamping windows positions.
            Default value: [unset]
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.DeltaTime">
            <summary>
            Time elapsed since last frame, in seconds.
            Default value: 1.0f / 10.0f.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.IniSavingRate">
            <summary>
            Maximum time between saving positions/sizes to .ini file, in seconds.
            Default value: 5.0f.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.IniFilename">
            <summary>
            Path to .ini file. NULL to disable .ini saving.
            Default value: "imgui.ini"
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.LogFilename">
            <summary>
            Path to .log file (default parameter to ImGui::LogToFile when no file is specified).
            Default value: "imgui_log.txt"
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MouseDoubleClickTime">
            <summary>
            Time for a double-click, in seconds.
            Default value: 0.30f.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MouseDoubleClickMaxDist">
            <summary>
            Distance threshold to stay in to validate a double-click, in pixels.
            Default Value: 6.0f.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MouseDragThreshold">
            <summary>
            Distance threshold before considering we are dragging.
            Default Value: 6.0f.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.KeyMap">
            <summary>
            Map of indices into the KeysDown[512] entries array.
            Default values: [unset]
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.KeyRepeatDelay">
            <summary>
            When holding a key/button, time before it starts repeating, in seconds. (for actions where 'repeat' is active).
            Default value: 0.250f.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.KeyRepeatRate">
            <summary>
            When holding a key/button, rate at which it repeats, in seconds.
            Default value: 0.020f.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.UserData">
            <summary>
            Store your own data for retrieval by callbacks.
            Default value: IntPtr.Zero.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.FontAtlas">
            <summary>
            Load and assemble one or more fonts into a single tightly packed texture. Output to Fonts array.
            Default value: [auto]
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.FontGlobalScale">
            <summary>
            Global scale all fonts.
            Default value: 1.0f.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.FontAllowUserScaling">
            <summary>
            Allow user scaling text of individual window with CTRL+Wheel.
            Default value: false.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.DisplayFramebufferScale">
            <summary>
            For retina display or other situations where window coordinates are different from framebuffer coordinates.
            User storage only, presently not used by ImGui.
            Default value: (1.0f, 1.0f).
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.DisplayVisibleMin">
            <summary>
            If you use DisplaySize as a virtual space larger than your screen, set DisplayVisibleMin/Max to the visible area.
            Default value: (0.0f, 0.0f)
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.DisplayVisibleMax">
            <summary>
            If the values are the same, we defaults to Min=0.0f) and Max=DisplaySize.
            Default value: (0.0f, 0.0f).
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.RenderDrawListsFn">
            <summary>
            Rendering function, will be called in Render(). 
            Alternatively you can keep this to NULL and call GetDrawData() after Render() to get the same pointer.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.GetClipboardTextFn">
            <summary>
            Optional: access OS clipboard
            (default to use native Win32 clipboard on Windows, otherwise uses a private clipboard. Override to access OS clipboard on other architectures)
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.SetClipboardTextFn">
            <summary>
            Optional: access OS clipboard
            (default to use native Win32 clipboard on Windows, otherwise uses a private clipboard. Override to access OS clipboard on other architectures)
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MemAllocFn">
            <summary>
            Optional: override memory allocations. MemFreeFn() may be called with a NULL pointer.
            (default to posix malloc/free)
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MemFreeFn">
            <summary>
            Optional: override memory allocations. MemFreeFn() may be called with a NULL pointer.
            (default to posix malloc/free)
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.ImeSetInputScreenPosFn">
            <summary>
            Optional: notify OS Input Method Editor of the screen position of your cursor for text input position (e.g. when using Japanese/Chinese IME in Windows)
            (default to use native imm32 api on Windows)
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.ImeWindowHandle">
            <summary>
            (Windows) Set this to your HWND to get automatic IME cursor positioning.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MousePos">
            <summary>
            Mouse position, in pixels (set to -1,-1 if no mouse / on another screen, etc.).
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MouseDown">
            <summary>
            Mouse buttons: left, right, middle + extras.
            ImGui itself mostly only uses left button (BeginPopupContext** are using right button).
            Others buttons allows us to track if the mouse is being used by your application + available to user as a convenience via IsMouse** API.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MouseWheel">
            <summary>
            Mouse wheel: 1 unit scrolls about 5 lines text.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MouseDrawCursor">
            <summary>
            Request ImGui to draw a mouse cursor for you (if you are on a platform without a mouse cursor).
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.KeyCtrl">
            <summary>
            Keyboard modifier pressed: Control.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.KeyShift">
            <summary>
            Keyboard modifier pressed: Shift
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.KeyAlt">
            <summary>
            Keyboard modifier pressed: Alt
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.KeysDown">
            <summary>
            Keyboard keys that are pressed (in whatever storage order you naturally have access to keyboard data)
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.InputCharacters">
            <summary>
            List of characters input (translated by user from keypress+keyboard state).
            Fill using AddInputCharacter() helper.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.WantCaptureMouse">
            <summary>
            Mouse is hovering a window or widget is active (= ImGui will use your mouse input).
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.WantCaptureKeyboard">
            <summary>
            Widget is active (= ImGui will use your keyboard input).
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.WantTextInput">
            <summary>
            Some text input widget is active, which will read input characters from the InputCharacters array.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.Framerate">
            <summary>
            Framerate estimation, in frame per second. Rolling average estimation based on IO.DeltaTime over 120 frames.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MetricsAllocs">
            <summary>
            Number of active memory allocations.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MetricsRenderVertices">
            <summary>
            Vertices output during last call to Render().
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MetricsRenderIndices">
            <summary>
            Indices output during last call to Render() = number of triangles * 3
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MetricsActiveWindows">
            <summary>
            Number of visible windows (exclude child windows)
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MousePosPrev">
            <summary>
            Previous mouse position
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MouseDelta">
            <summary>
            Mouse delta. Note that this is zero if either current or previous position are negative to allow mouse enabling/disabling.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MouseClicked">
            <summary>
            Mouse button went from !Down to Down
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MouseClickedPos0">
            <summary>
            Position at time of clicking
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MouseClickedPos1">
            <summary>
            Position at time of clicking
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MouseClickedPos2">
            <summary>
            Position at time of clicking
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MouseClickedPos3">
            <summary>
            Position at time of clicking
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MouseClickedPos4">
            <summary>
            Position at time of clicking
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MouseClickedTime">
            <summary>
            Time of last click (used to figure out double-click)
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MouseDoubleClicked">
            <summary>
            Has mouse button been double-clicked?
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MouseReleased">
            <summary>
            Mouse button went from Down to !Down
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MouseDownOwned">
            <summary>
            Track if button was clicked inside a window.
            We don't request mouse capture from the application if click started outside ImGui bounds.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MouseDownDuration">
            <summary>
            Duration the mouse button has been down (0.0f == just clicked).
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MouseDownDurationPrev">
            <summary>
            Previous time the mouse button has been down
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.MouseDragMaxDistanceSqr">
            <summary>
            Squared maximum distance of how much mouse has traveled from the click point
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.KeysDownDuration">
            <summary>
            Duration the keyboard key has been down (0.0f == just pressed)
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeIO.KeysDownDurationPrev">
            <summary>
            Previous duration the key has been down
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeStyle.Alpha">
            <summary>
            Global alpha applies to everything in ImGui.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeStyle.WindowPadding">
            <summary>
            Padding within a window.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeStyle.WindowMinSize">
            <summary>
            Minimum window size.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeStyle.WindowRounding">
            <summary>
            Radius of window corners rounding. Set to 0.0f to have rectangular windows.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeStyle.WindowTitleAlign">
            <summary>
            Alignment for title bar text.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeStyle.ChildWindowRounding">
            <summary>
            Radius of child window corners rounding. Set to 0.0f to have rectangular windows.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeStyle.FramePadding">
            <summary>
            Padding within a framed rectangle (used by most widgets).
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeStyle.FrameRounding">
            <summary>
            Radius of frame corners rounding. Set to 0.0f to have rectangular frame (used by most widgets). 
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeStyle.ItemSpacing">
            <summary>
            Horizontal and vertical spacing between widgets/lines.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeStyle.ItemInnerSpacing">
            <summary>
            Horizontal and vertical spacing between within elements of a composed widget (e.g. a slider and its label).
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeStyle.TouchExtraPadding">
            <summary>
            Expand reactive bounding box for touch-based system where touch position is not accurate enough. Unfortunately we don't sort widgets so priority on overlap will always be given to the first widget. So don't grow this too much!
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeStyle.IndentSpacing">
            <summary>
            Horizontal indentation when e.g. entering a tree node
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeStyle.ColumnsMinSpacing">
            <summary>
            Minimum horizontal spacing between two columns
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeStyle.ScrollbarSize">
            <summary>
            Width of the vertical scrollbar, Height of the horizontal scrollbar
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeStyle.ScrollbarRounding">
            <summary>
            Radius of grab corners for scrollbar
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeStyle.GrabMinSize">
            <summary>
            Minimum width/height of a grab box for slider/scrollbar
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeStyle.GrabRounding">
            <summary>
            Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeStyle.DisplayWindowPadding">
            <summary>
            Window positions are clamped to be visible within the display area by at least this amount. Only covers regular windows.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeStyle.DisplaySafeAreaPadding">
            <summary>
            If you cannot see the edge of your screen (e.g. on a TV) increase the safe area padding. Covers popups/tooltips as well regular windows.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeStyle.AntiAliasedLines">
            <summary>
            Enable anti-aliasing on lines/borders. Disable if you are really tight on CPU/GPU.
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeStyle.AntiAliasedShapes">
            <summary>
            Enable anti-aliasing on filled shapes (rounded rectangles, circles, etc.)
            </summary>
        </member>
        <member name="F:ImGuiNET.NativeStyle.CurveTessellationTol">
            <summary>
            Tessellation tolerance. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality.
            </summary>
        </member>
        <member name="T:ImGuiNET.SelectableFlags">
            <summary>
            Flags for ImGui::Selectable()
            </summary>
        </member>
        <member name="F:ImGuiNET.SelectableFlags.DontClosePopups">
            <summary>
            Clicking this doesn't close parent popup window
            </summary>
        </member>
        <member name="F:ImGuiNET.SelectableFlags.SpanAllColumns">
            <summary>
            Selectable frame can span all columns (text will still fit in current column)
            </summary>
        </member>
        <member name="T:ImGuiNET.SetCondition">
            <summary>
            Condition flags for ImGui::SetWindow***(), SetNextWindow***(), SetNextTreeNode***() functions.
            All those functions treat 0 as a shortcut to Always.
            </summary>
        </member>
        <member name="F:ImGuiNET.SetCondition.Always">
            <summary>
            Set the variable.
            </summary>
        </member>
        <member name="F:ImGuiNET.SetCondition.Once">
            <summary>
            Only set the variable on the first call per runtime session
            </summary>
        </member>
        <member name="F:ImGuiNET.SetCondition.FirstUseEver">
            <summary>
            Only set the variable if the window doesn't exist in the .ini file
            </summary>
        </member>
        <member name="F:ImGuiNET.SetCondition.Appearing">
            <summary>
            Only set the variable if the window is appearing after being inactive (or the first time)
            </summary>
        </member>
        <member name="F:ImGuiNET.Storage.Data">
            <summary>
            A vector of Storage.Pair values.
            </summary>
        </member>
        <member name="P:ImGuiNET.Style.Alpha">
            <summary>
            Global alpha applies to everything in ImGui.
            </summary>
        </member>
        <member name="P:ImGuiNET.Style.WindowPadding">
            <summary>
            Padding within a window.
            </summary>
        </member>
        <member name="P:ImGuiNET.Style.WindowMinSize">
            <summary>
            Minimum window size.
            </summary>
        </member>
        <member name="P:ImGuiNET.Style.WindowRounding">
            <summary>
            Radius of window corners rounding. Set to 0.0f to have rectangular windows.
            </summary>
        </member>
        <member name="P:ImGuiNET.Style.WindowTitleAlign">
            <summary>
            Alignment for title bar text.
            </summary>
        </member>
        <member name="P:ImGuiNET.Style.ChildWindowRounding">
            <summary>
            Radius of child window corners rounding. Set to 0.0f to have rectangular windows.
            </summary>
        </member>
        <member name="P:ImGuiNET.Style.FramePadding">
            <summary>
            Padding within a framed rectangle (used by most widgets).
            </summary>
        </member>
        <member name="P:ImGuiNET.Style.FrameRounding">
            <summary>
            Radius of frame corners rounding. Set to 0.0f to have rectangular frame (used by most widgets). 
            </summary>
        </member>
        <member name="P:ImGuiNET.Style.ItemSpacing">
            <summary>
            Horizontal and vertical spacing between widgets/lines.
            </summary>
        </member>
        <member name="P:ImGuiNET.Style.ItemInnerSpacing">
            <summary>
            Horizontal and vertical spacing between within elements of a composed widget (e.g. a slider and its label).
            </summary>
        </member>
        <member name="P:ImGuiNET.Style.TouchExtraPadding">
            <summary>
            Expand reactive bounding box for touch-based system where touch position is not accurate enough. Unfortunately we don't sort widgets so priority on overlap will always be given to the first widget. So don't grow this too much!
            </summary>
        </member>
        <member name="P:ImGuiNET.Style.IndentSpacing">
            <summary>
            Horizontal indentation when e.g. entering a tree node
            </summary>
        </member>
        <member name="P:ImGuiNET.Style.ColumnsMinSpacing">
            <summary>
            Minimum horizontal spacing between two columns
            </summary>
        </member>
        <member name="P:ImGuiNET.Style.ScrollbarSize">
            <summary>
            Width of the vertical scrollbar, Height of the horizontal scrollbar
            </summary>
        </member>
        <member name="P:ImGuiNET.Style.ScrollbarRounding">
            <summary>
            Radius of grab corners for scrollbar
            </summary>
        </member>
        <member name="P:ImGuiNET.Style.GrabMinSize">
            <summary>
            Minimum width/height of a grab box for slider/scrollbar
            </summary>
        </member>
        <member name="P:ImGuiNET.Style.GrabRounding">
            <summary>
            Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.
            </summary>
        </member>
        <member name="P:ImGuiNET.Style.DisplayWindowPadding">
            <summary>
            Window positions are clamped to be visible within the display area by at least this amount. Only covers regular windows.
            </summary>
        </member>
        <member name="P:ImGuiNET.Style.DisplaySafeAreaPadding">
            <summary>
            If you cannot see the edge of your screen (e.g. on a TV) increase the safe area padding. Covers popups/tooltips as well regular windows.
            </summary>
        </member>
        <member name="P:ImGuiNET.Style.AntiAliasedLines">
            <summary>
            Enable anti-aliasing on lines/borders. Disable if you are really tight on CPU/GPU.
            </summary>
        </member>
        <member name="P:ImGuiNET.Style.AntiAliasedShapes">
            <summary>
            Enable anti-aliasing on filled shapes (rounded rectangles, circles, etc.)
            </summary>
        </member>
        <member name="P:ImGuiNET.Style.CurveTessellationTolerance">
            <summary>
            Tessellation tolerance. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality.
            </summary>
        </member>
        <member name="M:ImGuiNET.Style.GetColor(ImGuiNET.ColorTarget)">
            <summary>
            Gets the current style color for the given UI element type.
            </summary>
            <param name="target">The type of UI element.</param>
            <returns>The element's color as currently configured.</returns>
        </member>
        <member name="M:ImGuiNET.Style.SetColor(ImGuiNET.ColorTarget,System.Numerics.Vector4)">
            <summary>
            Sets the style color for a particular UI element type.
            </summary>
            <param name="target">The type of UI element.</param>
            <param name="value">The new color.</param>
        </member>
        <member name="T:ImGuiNET.StyleVar">
            <summary>
            Enumeration for PushStyleVar() / PopStyleVar()
            NB: the enum only refers to fields of ImGuiStyle() which makes sense to be pushed/poped in UI code. Feel free to add others.
            </summary>
        </member>
        <member name="F:ImGuiNET.StyleVar.Alpha">
            <summary>
            float
            </summary>
        </member>
        <member name="F:ImGuiNET.StyleVar.WindowPadding">
            <summary>
            System.Numerics.Vector2
            </summary>
        </member>
        <member name="F:ImGuiNET.StyleVar.WindowRounding">
            <summary>
            float
            </summary>
        </member>
        <member name="F:ImGuiNET.StyleVar.WindowMinSize">
            <summary>
            System.Numerics.Vector2
            </summary>
        </member>
        <member name="F:ImGuiNET.StyleVar.ChildWindowRounding">
            <summary>
            float
            </summary>
        </member>
        <member name="F:ImGuiNET.StyleVar.FramePadding">
            <summary>
            System.Numerics.Vector2
            </summary>
        </member>
        <member name="F:ImGuiNET.StyleVar.FrameRounding">
            <summary>
            float
            </summary>
        </member>
        <member name="F:ImGuiNET.StyleVar.ItemSpacing">
            <summary>
            System.Numerics.Vector2
            </summary>
        </member>
        <member name="F:ImGuiNET.StyleVar.ItemInnerSpacing">
            <summary>
            System.Numerics.Vector2
            </summary>
        </member>
        <member name="F:ImGuiNET.StyleVar.IndentSpacing">
            <summary>
            float
            </summary>
        </member>
        <member name="F:ImGuiNET.StyleVar.GrabMinSize">
            <summary>
            float
            </summary>
        </member>
        <member name="F:ImGuiNET.TextEditCallbackData.EventFlag">
            <summary>
            One of InputTextFlags.*. Read-only.
            </summary>
        </member>
        <member name="F:ImGuiNET.TextEditCallbackData.Flags">
            <summary>
            What user passed to InputText(). Read-only.
            </summary>
        </member>
        <member name="F:ImGuiNET.TextEditCallbackData.UserData">
            <summary>
            What user passed to InputText(). Read-only.
            </summary>
        </member>
        <member name="P:ImGuiNET.TextEditCallbackData.ReadOnly">
            <summary>
            Read-only mode. Read-only.
            </summary>
        </member>
        <member name="F:ImGuiNET.TextEditCallbackData.EventChar">
            <summary>
            Character input. Read-write (replace character or set to zero).
            </summary>
        </member>
        <member name="F:ImGuiNET.TextEditCallbackData.EventKey">
            <summary>
            Key pressed (Up/Down/Tab). Read-only.
            </summary>
        </member>
        <member name="F:ImGuiNET.TextEditCallbackData.Buf">
            <summary>
            Current text. Read-write (pointed data only). char* in native code.
            </summary>
        </member>
        <member name="F:ImGuiNET.TextEditCallbackData.BufSize">
            <summary>
            Read-only.
            </summary>
        </member>
        <member name="F:ImGuiNET.TextEditCallbackData.BufDirty">
            <summary>
            Must set if you modify Buf directly. Write-only.
            </summary>
        </member>
        <member name="F:ImGuiNET.TextEditCallbackData.CursorPos">
            <summary>
            Read-write.
            </summary>
        </member>
        <member name="F:ImGuiNET.TextEditCallbackData.SelectionStart">
            <summary>
            Read-write. (Equal to SelectionEnd when no selection)
            </summary>
        </member>
        <member name="F:ImGuiNET.TextEditCallbackData.SelectionEnd">
            <summary>
            Read-write.
            </summary>
        </member>
        <member name="F:ImGuiNET.TreeNodeFlags.Selected">
            <summary>
            Draw as selected
            </summary>
        </member>
        <member name="F:ImGuiNET.TreeNodeFlags.Framed">
            <summary>
            Full colored frame (e.g. for CollapsingHeader)
            </summary>
        </member>
        <member name="F:ImGuiNET.TreeNodeFlags.AllowOverlapMode">
            <summary>
            Hit testing to allow subsequent widgets to overlap this one
            </summary>
        </member>
        <member name="F:ImGuiNET.TreeNodeFlags.NoTreePushOnOpen">
            <summary>
            Don't do a TreePush() when open (e.g. for CollapsingHeader) = no extra indent nor pushing on ID stack
            </summary>
        </member>
        <member name="F:ImGuiNET.TreeNodeFlags.NoAutoOpenOnLog">
            <summary>
            Don't do a TreePush() when open (e.g. for CollapsingHeader) = no extra indent nor pushing on ID stack
            </summary>
        </member>
        <member name="F:ImGuiNET.TreeNodeFlags.DefaultOpen">
            <summary>
            Default node to be open
            </summary>
        </member>
        <member name="F:ImGuiNET.TreeNodeFlags.OpenOnDoubleClick">
            <summary>
            Need double-click to open node
            </summary>
        </member>
        <member name="F:ImGuiNET.TreeNodeFlags.OpenOnArrow">
            <summary>
            Only open when clicking on the arrow part. If ImGuiTreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or double-click all box to open.
            </summary>
        </member>
        <member name="F:ImGuiNET.TreeNodeFlags.Leaf">
            <summary>
            No collapsing, no arrow (use as a convenience for leaf nodes).
            </summary>
        </member>
        <member name="F:ImGuiNET.TreeNodeFlags.Bullet">
            <summary>
            Display a bullet instead of arrow
            </summary>
        </member>
        <member name="T:ImGuiNET.WindowFlags">
            <summary>
            Flags for ImGui::Begin()
            </summary>
        </member>
        <member name="F:ImGuiNET.WindowFlags.NoTitleBar">
            <summary>
            Disable title-bar
            </summary>
        </member>
        <member name="F:ImGuiNET.WindowFlags.NoResize">
            <summary>
            Disable user resizing with the lower-right grip
            </summary>
        </member>
        <member name="F:ImGuiNET.WindowFlags.NoMove">
            <summary>
            Disable user moving the window
            </summary>
        </member>
        <member name="F:ImGuiNET.WindowFlags.NoScrollbar">
            <summary>
            Disable scrollbar (window can still scroll with mouse or programatically)
            </summary>
        </member>
        <member name="F:ImGuiNET.WindowFlags.NoScrollWithMouse">
            <summary>
            Disable user scrolling with mouse wheel
            </summary>
        </member>
        <member name="F:ImGuiNET.WindowFlags.NoCollapse">
            <summary>
            Disable user collapsing window by double-clicking on it
            </summary>
        </member>
        <member name="F:ImGuiNET.WindowFlags.AlwaysAutoResize">
            <summary>
            Resize every window to its content every frame
            </summary>
        </member>
        <member name="F:ImGuiNET.WindowFlags.ShowBorders">
            <summary>
            Show borders around windows and items
            </summary>
        </member>
        <member name="F:ImGuiNET.WindowFlags.NoSavedSettings">
            <summary>
            Never load/save settings in .ini file
            </summary>
        </member>
        <member name="F:ImGuiNET.WindowFlags.NoInputs">
            <summary>
            Disable catching mouse or keyboard inputs
            </summary>
        </member>
        <member name="F:ImGuiNET.WindowFlags.MenuBar">
            <summary>
            Has a menu-bar
            </summary>
        </member>
        <member name="F:ImGuiNET.WindowFlags.HorizontalScrollbar">
            <summary>
            Enable horizontal scrollbar (off by default).
            You need to use SetNextWindowContentSize(ImVec2(width,0.0f)); prior to calling Begin() to specify width.
            </summary>
        </member>
        <member name="F:ImGuiNET.WindowFlags.NoFocusOnAppearing">
            <summary>
            Disable taking focus when transitioning from hidden to visible state
            </summary>
        </member>
        <member name="F:ImGuiNET.WindowFlags.NoBringToFrontOnFocus">
            <summary>
            Disable bringing window to front when taking focus (e.g. clicking on it or programatically giving it focus)
            </summary>
        </member>
    </members>
</doc>
